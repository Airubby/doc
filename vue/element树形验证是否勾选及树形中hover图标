<template>
  <el-form :model="access_info" :rules="formRules" ref="formInfo">
    <!--下拉框带树形-->
    <el-select v-model="value6" placeholder="请选择">
      <el-option :value="value6" :label="value7">
        <el-tree show-checkbox ref="tree" node-key="id" :data="data" :props="defaultProps" @check-change="selsetchangeTree"></el-tree>
      </el-option>
    </el-select>
    <!--下拉框带树形end-->
    <el-form-item prop="obj.name">
          <el-input v-model="access_info.obj.name" size="small" style="display:none;"></el-input>
    </el-form-item>
    <el-tree
        :data="access_data"
        node-key="id"
        ref="tree"
        show-checkbox
        :props="defaultProps"
        accordion
        @check-change="changeTree"
         @node-click="handleNodeClick"
        :render-content="renderEnergy"
        :expand-on-click-node="true"
        >
        <!--不用:render-content="renderEnergy"这种方法，直接用下面的方法-->
        <span class="loncom_tree_list" :class="{'loncom_treehidebox':data.type=='1'}" slot-scope="{ node, data }">
            <em class="loncom_fl loncom_mr10" @click="()=>getaccessstatu(node, data)">{{node.label}}</em>
            <em class="loncom_fr loncom_tree_listbtn">
                <i class="el-icon-edit loncom_mr5" @click="()=>editControllerTree(node,data)"></i>
                <i class="el-icon-delete" v-if="data.type=='1'" @click="()=>removeControllerTree(node, data)"></i>
            </em>
        </span>
    </el-tree>
    <el-form-item prop="listtree">
          <el-input v-model="access_info.listtree" size="small" style="display:none;"></el-input>
    </el-form-item>
    <el-button type="primary" @click="submitInfo('formInfo')">保 存</el-button>
  </el-form>
</template>

<style scoped>
//这个得写全局才行
.loncom_tree_list{
  width: -webkit-calc(100% - 24px);
  width: -moz-calc(100% - 24px);
  width: calc(100% - 24px);
  font-size: 12px;
}
.loncom_tree_listbtn{
  display: none;
}
.loncom_tree_list:hover .loncom_tree_listbtn{
  display: block;
}

</style>


export default {
  data() {
    return{
      value6:'',
      value7:'',
      access_info:{   
           listtree:'',   
           list:[],
           obj{
              name:'',
           }
       },
       //树形
      access_data: [],
      get_list:[],  //获取的勾选项id
      formRules:{
            'obj.name':[
                { required: true, message: '请填写', trigger: 'blur' },
            ],
            listtree:[
                { required: true, message: '请选择应用对象', trigger: 'blur' },
            ]
       },
    }
  },
  methods:{
      getTree:function(){
        this.$api.get('/tree', {}, r => {
            console.log(r)
           if(r.err_code=="0"){
                this.tree_data=r.data;
                //根据需求 隐藏勾选框
                this.$nextTick(function(){
                    let tree=this.$el.querySelectorAll('.loncom_treehidebox');
                    tree.forEach(function(item,index){
                        item.parentNode.querySelector(".el-checkbox").style.display="none";
                    })
                })
           }
        });
      },
     changeTree:function(data,checked){
          //设置单选
            if(this.$refs.tree.getCheckedKeys(true).length%2===0){
                if(checked){
                    this.$refs.tree.setCheckedKeys([]);
                    this.$refs.tree.setCheckedKeys([data.id]);
                }else{
                    this.$refs.tree.setCheckedKeys([]);
                }        
            }
            this.get_list=this.$refs.tree.getCheckedKeys(true);
        },
     //设置树形勾选的,编辑时获取详情后调用设置勾选的项
     setCheckedKeys:function() {
         this.$refs.tree.setCheckedKeys(this.get_list);
      },
     selsetchangeTree:function(){
          let arrnode=this.$refs.tree.getCheckedNodes();
          let name=[];
          console.log(arrnode)
          for(var i=0;i<arrnode.length;i++){
            name.push(arrnode[i].label);
          }
          this.value7=name.toString();
     },
     handleNodeClick(data,node) {},
     renderEnergy(h, { node, data, store }) {
            return (
            <span class="loncom_tree_list" on-dblclick={ () => this.querysetting(node,data,store) } >
              <em class="loncom_mr10">{node.label}</em>
              <em class="loncom_fr loncom_tree_listbtn">
                <i class="el-icon-edit loncom_mr5" on-click={ () => this.editEnergyTree(node,data,store) }></i>
                <i class="el-icon-delete" on-click={ () => this.removeEnergyTree(node, data) }></i>
              </em>
            </span>
            );
        },
        removeEnergyTree(node, data) {
            this.$confirm('此操作将永久删除该树形, 是否继续?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
                }).then(() => {
                    var parmt={};
                    parmt.energydev={};
                    parmt.energydev.id=data.id;
                  this.$api.get('/energy/deleteenergy', {"model":JSON.stringify(parmt)}, r => {
                          if(r.err_code=="0"){
                                const parent = node.parent;
                                const children = parent.data.children || parent.data;
                                const index = children.findIndex(d => d.id === data.id);
                                children.splice(index, 1);
                          }
                  });
                })

        },
    submitInfo:function(formName){
       this.$refs[formName].validate((valid) => {
        if(valid){ //验证通过
        }
     })
    }
  },
  watch:{
        //监听树形数据变化
        get_list:function(val){
            if(val.length>0){
                this.access_info.listtree=true;
            }else{
                this.access_info.listtree='';
            }
            
        },
   },
}
                                                
