<template>
  <el-form :model="access_info" :rules="formRules" ref="formInfo">
    <el-form-item prop="obj.name">
          <el-input v-model="access_info.obj.name" size="small" style="display:none;"></el-input>
    </el-form-item>
    <el-tree
        :data="access_data"
        node-key="id"
        ref="tree"
        show-checkbox
        :props="defaultProps"
        accordion
        :getCheckedNodes="getCheckedNodes"
        :setCheckedNodes="setCheckNodes"
        @check-change="changeTree"
         @node-click="handleNodeClick"
        :render-content="renderEnergy"
        :expand-on-click-node="true"
        >
    </el-tree>
    <el-form-item prop="listtree">
          <el-input v-model="access_info.listtree" size="small" style="display:none;"></el-input>
    </el-form-item>
    <el-button type="primary" @click="submitInfo('formInfo')">保 存</el-button>
  </el-form>
</template>

<style>
//这个得写全局才行
.loncom_tree_list{
  width: -webkit-calc(100% - 24px);
  width: -moz-calc(100% - 24px);
  width: calc(100% - 24px);
  font-size: 12px;
}
.loncom_tree_listbtn{
  display: none;
}
.loncom_tree_list:hover .loncom_tree_listbtn{
  display: block;
}

</style>


export default {
  data() {
    return{
      access_info:{   // 这个树形初始化时必须得在data属性中存在，不然watch监听不到
           listtree:'',   
           list:[],
           obj{
              name:'',
           }
       },
       //树形
      access_data: [],
      formRules:{
            'obj.name':[
                { required: true, message: '请填写', trigger: 'blur' },
            ],
            listtree:[
                { required: true, message: '请选择应用对象', trigger: 'blur' },
            ]
       },
    }
  },
  methods:{
    changeTree:function(){
          this.access_info.list=this.$refs.tree.getCheckedNodes(true);
     },
     //获取树形勾选的
     getCheckedNodes:function(){

     },
     handleNodeClick(data,node) {},
     renderEnergy(h, { node, data, store }) {
            return (
            <span class="loncom_tree_list" on-dblclick={ () => this.querysetting(node,data,store) } >
              <em class="loncom_mr10">{node.label}</em>
              <em class="loncom_fr loncom_tree_listbtn">
                <i class="el-icon-edit loncom_mr5" on-click={ () => this.editEnergyTree(node,data,store) }></i>
                <i class="el-icon-delete" on-click={ () => this.removeEnergyTree(node, data) }></i>
              </em>
            </span>
            );
        },
    submitInfo:function(formName){
       this.$refs[formName].validate((valid) => {
        if(valid){ //验证通过
        }
     })
    }
  },
  watch:{
        //监听树形数据变化
        'access_info.list':function(val,oldval){
            if(val.length>0){
                this.access_info.listtree=val[0].name;
            }else{
                this.access_info.listtree='';
            }
            
        },
   },
}
                                                
