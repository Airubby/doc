<span :class='{"one":true,"two":true}'></span>
Object.assign([], data), Object.assign({},data)
newArray = oldArray.slice(); //slice会clone返回一个新数组
自定义扩展参数：:on-success="onSuccess.bind(this,'canshu')"  //this是原有的参数
子组件中获取dom元素，得在mounted() {
        this.$nextTick(function(){
            这里能获取dom元素
        })
    },
if (this && this._isDestroyed) {组件摧毁后执行}  
<el-scrollbar style="height:400px;" class="loncom_scrollbar"></el-scrollbar>
.loncom_scrollbar .el-scrollbar__wrap{
  overflow-x: hidden !important;
}

//enter登录
<el-input type="password" v-model.trim="user.psword" ref="psinput" placeholder="请输入登录密码" @keyup.native="keyLogin($event)"></el-input>
<el-button type="primary" @click="loginIn()" @keydown="keyLogin($event)">登录</el-button>
keyLogin:function(ev,userName){
if(ev.keyCode == 13){
        this.loginIn();
}
},
this.$refs.psinput.focus();  //登录失败获取焦点

打包后的js,css不带hash值设置：build/webpack.prod.conf.js

导出下载：
function exportFile(fileUrl,name){
    //fileUrl 是给的流文件接口地址:"/export/hisalarm?level="+level; name:导出显示的名称
    let link = document.createElement('a')
    link.style.display = 'none'
    link.href = fileUrl
    link.setAttribute('download', name)

    document.body.appendChild(link)
    link.click();
    window.URL.revokeObjectURL(link.href); // 释放URL 对象
    document.body.removeChild(link);// 下载完成移除元素
}
function downFile(fileUrl){
    //fileUrl 是给的文件路径地址:/static/test.pdf
    axios.post(fileUrl, {
        responseType: 'blob', //重要
    }).then(response => {
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        let fname = fileUrl.split("/").length>1?fileUrl.split("/")[fileUrl.split("/").length-1]:fileUrl;
        link.href = url;
        link.setAttribute('download', fname);
        document.body.appendChild(link);
        link.click();
        window.URL.revokeObjectURL(link.href); // 释放URL 对象
        document.body.removeChild(link);// 下载完成移除元素
    })
}

pickerOptions: {
      shortcuts: [{
        text: '今日',
        onClick(picker) {
            const theDate = new Date();
            const start=theDate.Format("yyyy-MM-dd 00:00:00");
            const end=theDate.Format("yyyy-MM-dd 23:59:59");
            picker.$emit('pick', [start, end]);
        }
      }, {
        text: '本周',
        onClick(picker) {
            const theDate = new Date();
            const nowDay=theDate.getDay();
            let start=null;
            let end=null;
            if(nowDay!=0){
                start=new Date(theDate.getTime()-3600*1000*24*(nowDay-1)).Format("yyyy-MM-dd 00:00:00");
                end=new Date(theDate.getTime()+3600*1000*24*(7-nowDay)).Format("yyyy-MM-dd 23:59:59");
            }else{
                start=new Date(theDate.getTime()-3600*1000*24*6).Format("yyyy-MM-dd 00:00:00");
                end=theDate.Format("yyyy-MM-dd 23:59:59");
            }
            picker.$emit('pick', [start, end]);
        }
      },{
        text: '本月',
        onClick(picker) {
            const theDate = new Date();
            let theMonth=theDate.getMonth();
            const start = new Date(theDate.getFullYear(),theMonth,1).Format("yyyy-MM-dd 00:00:00");
            let nextMonth=theMonth+1;
            const end=new Date(new Date(theDate.getFullYear(),nextMonth,1)-1000*60*60*24).Format("yyyy-MM-dd 23:59:59");
            picker.$emit('pick', [start, end]);
        }
      }]
      },
